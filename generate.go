package main

import (
	"go/ast"
	"go/parser"
	"go/token"
	"strings"
	"unicode/utf8"

	gen "github.com/moznion/gowrtr/generator"
)

func isPrivate(name string) bool {
	initial, _ := utf8.DecodeRuneInString(name)
	if 'a' <= initial && initial <= 'z' {
		return true
	}
	return false
}

type field struct {
	name, typ string
}

func astNodeString(src []byte, node ast.Node) string {
	return string(src[node.Pos()-1 : node.End()-1])
}

func generate(src []byte) (string, error) {

	props := map[string][]field{} // typeName => field

	fset := token.NewFileSet()
	f, err := parser.ParseFile(fset, "", src, 0)
	if err != nil {
		return "", err
	}

	pkg := f.Name.Name

	// get props' type and fields
	ast.Inspect(f, func(n ast.Node) bool {
		if typeSpec, ok := n.(*ast.TypeSpec); ok {
			if structType, ok := typeSpec.Type.(*ast.StructType); ok {

				typeName := typeSpec.Name.Name
				for _, fieldSpec := range structType.Fields.List {

					typ := astNodeString(src, fieldSpec.Type)
					for i := range fieldSpec.Names {

						name := fieldSpec.Names[i].Name
						if isPrivate(name) {
							if props[typeName] == nil {
								props[typeName] = []field{}
							}
							props[typeName] = append(props[typeName], field{name, typ})
						}
					}
				}
			}
		}
		return true
	})

	if len(props) == 0 {
		return "", nil
	}

	g := gen.NewRoot(
		gen.NewComment(" Code generated by propgen. DO NOT EDIT."),
		gen.NewNewline(),
		gen.NewPackage(pkg),
	).EnableGoimports()

	for typeName, prop := range props {
		for _, field := range prop {

			r, _ := utf8.DecodeRuneInString(typeName)
			receiver := strings.ToLower(string(r))
			accessor := receiver + "." + field.name

			i, size := utf8.DecodeRuneInString(field.name)
			getter := strings.ToUpper(string(i)) + field.name[size:]
			setter := "Set" + getter

			ptrTypeName := "*" + typeName

			g = g.AddStatements(
				gen.NewNewline(),
				gen.NewFunc(
					gen.NewFuncReceiver(receiver, ptrTypeName),
					gen.NewFuncSignature(getter).
						AddReturnTypes(field.typ),
				).
					AddStatements(
						gen.NewReturnStatement(accessor),
					),

				gen.NewNewline(),
				gen.NewFunc(
					gen.NewFuncReceiver(receiver, ptrTypeName),
					gen.NewFuncSignature(setter).
						AddFuncParameters(
							gen.NewFuncParameter(field.name, field.typ),
						),
				).
					AddStatements(
						gen.NewRawStatement(accessor+" = "+field.name),
					),
			)
		}
	}

	return g.Generate(0)
}
